// üì¶ G·ªòP C·∫¢ 3 SERVER: ƒëƒÉng nh·∫≠p + c√¥ng n·ª£ + nh·∫≠p h√†ng + b√°n h√†ng
require('dotenv').config();
const path = require('path');
const express = require('express');
const mongoose = require('mongoose');
const session = require('express-session');
const MongoStore = require('connect-mongo');

// ======= MONGODB K·∫æT N·ªêI =======
const MONGO_URI = process.env.MONGO_URI ||
  'mongodb+srv://xuanhiep1112:r7aVuSkE8DEXVEyU@quanlycongno.vvimbfe.mongodb.net/QuanLyCongNo?retryWrites=true&w=majority';

mongoose.connect(MONGO_URI)
  .then(() => console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB'))
  .catch(err => {
    console.error('‚ùå L·ªói MongoDB:', err);
    process.exit(1);
  });

// ======= EXPRESS APP & C·∫§U H√åNH =======
const app = express();
const PORT = process.env.PORT || 10000;

app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

app.use(session({
  secret: process.env.SESSION_SECRET || 'mat_khau_bi_mat',
  resave: false,
  saveUninitialized: false,
  store: MongoStore.create({ mongoUrl: MONGO_URI }),
  cookie: { maxAge: 1 * 60 * 60 * 1000 } // 1 ti·∫øng
}));

// ======= SCHEMA C√îNG N·ª¢ =======
const HangHoaSchema = new mongoose.Schema({
  noidung: String,
  soluong: Number,
  dongia: Number,
  thanhtoan: { type: Boolean, default: false }
}, { _id: false });

const CongNoSchema = new mongoose.Schema({
  ten: String,
  ten_khongdau: String,
  ngay: String,
  hanghoa: [HangHoaSchema]
});
const CongNo = mongoose.model('CongNo', CongNoSchema);

function removeDiacritics(str) {
  return str.normalize('NFD').replace(/\p{Diacritic}/gu, '').toLowerCase();
}

function requireLogin(req, res, next) {
  if (!req.session.user) return res.redirect('/index.html');
  res.set('Cache-Control', 'no-store');
  next();
}
app.get('/api/congno', requireLogin, async (req, res) => {
  try {
    const data = await CongNo.find({});
    res.json(data);
  } catch (err) {
    console.error(err);
    res.status(500).json([]);
  }
});

// ======= SCHEMA NH·∫¨P H√ÄNG =======
// ƒê√£ x√≥a '_id: false' ƒë·ªÉ Mongoose t·ª± ƒë·ªông t·∫°o _id cho t·ª´ng subdocument (m√≥n h√†ng)
const itemSchema = new mongoose.Schema({
    tenhang: { type: String, required: true },
    dvt: { type: String, required: true },
    soluong: { type: Number, required: true },
    dongia: { type: Number, required: true },
    ck: { type: Number, default: 0 },
    gianhap: { type: Number, required: true },
    thanhtien: { type: Number, required: true }
}); // Kh√¥ng c√≥ { _id: false } n·ªØa

const receiptSchema = new mongoose.Schema({
    ngay: { type: Date, required: true },
    daily: { type: String, required: true },
    items: [itemSchema],
    tongtien: { type: Number, required: true }
}, { timestamps: true });

// === MODEL G·ªêC CHO COLLECTION 'stockreceipts' (GI·ªÆ NGUY√äN) ===
const StockReceipt = mongoose.model('StockReceipt', receiptSchema);

// === MODEL M·ªöI CHO COLLECTION 'PhieuNhapKho' ===
const PhieuNhapKhoEntry = mongoose.model('PhieuNhapKhoEntry', receiptSchema, 'PhieuNhapKho');



// ======= SCHEMA KHO H√ÄNG =======
const productSchema = new mongoose.Schema({
  code: String,
  name: String,
  unit: String,
  qty_on_hand: Number,
  price: Number
});
const Product = mongoose.model('Product', productSchema);

// ======= ƒêƒÇNG NH·∫¨P / ƒêƒÇNG XU·∫§T =======
const USERS = {
  minhchau: '0938039084'
};

app.post('/login', (req, res) => {
  const { username, password } = req.body;
  if (USERS[username] && USERS[username] === password) {
    req.session.user = { username };
    return res.redirect('/congno');
  }
  res.status(401).send('Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u');
});

app.get('/logout', (req, res) => {
  req.session.destroy(() => res.redirect('/index.html'));
});

app.get('/congno', requireLogin, (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'congno.html'));
});

app.get('/nhaphang', requireLogin, (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'nhaphang.html'));
});

app.get('/banhang', requireLogin, (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'banhang.html'));
});

// ƒê·∫£m b·∫£o route n√†y t·ªìn t·∫°i v√† ch√≠nh x√°c
app.get('/print-receipt', requireLogin, (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'print-receipt.html'));
});

app.get('/session-check', (req, res) => {
  if (req.session.user) res.sendStatus(200);
  else res.sendStatus(401);
});

// ======= API C√îNG N·ª¢ =======
app.post('/them', requireLogin, async (req, res) => {
  const { ten, ngay, hanghoa } = req.body;
  if (!ten || !ngay || !Array.isArray(hanghoa) || hanghoa.length === 0) {
    return res.status(400).json({ success: false });
  }
  try {
    await new CongNo({ ten, ten_khongdau: removeDiacritics(ten), ngay, hanghoa }).save();
    res.json({ success: true });
  } catch {
    res.status(500).json({ success: false });
  }
});

app.get('/timkiem', requireLogin, async (req, res) => {
  const kw = removeDiacritics(req.query.ten || '');
  try {
    const data = await CongNo.find({ ten_khongdau: { $regex: kw, $options: 'i' } });
    res.json(data);
  } catch {
    res.status(500).json([]);
  }
});

app.post('/xoa', requireLogin, async (req, res) => {
  const { id, index } = req.body;
  if (!id || index === undefined) return res.status(400).json({ success: false });
  try {
    const congno = await CongNo.findById(id);
    if (!congno) return res.status(404).json({ success: false });

    congno.hanghoa.splice(index, 1);
    if (congno.hanghoa.length === 0) await CongNo.findByIdAndDelete(id);
    else await congno.save();

    res.json({ success: true });
  } catch {
    res.status(500).json({ success: false });
  }
});

app.post('/thanhtoan', requireLogin, async (req, res) => {
  const { id, index } = req.body;
  try {
    const doc = await CongNo.findById(id);
    if (!doc || !doc.hanghoa[index]) return res.status(404).send('Kh√¥ng t√¨m th·∫•y');

    doc.hanghoa[index].thanhtoan = true;
    await doc.save();
    res.send({ ok: true });
  } catch (e) {
    console.error(e);
    res.status(500).send('L·ªói server');
  }
});

// ======= API NH·∫¨P H√ÄNG =======
app.post('/api/nhaphang', requireLogin, async (req, res) => {
    try {
        const { ngay, daily, items, tongtien } = req.body;
        const newReceipt = new PhieuNhapKhoEntry({
            ngay: new Date(ngay),
            daily,
            items,
            tongtien
        });
        await newReceipt.save();
        res.status(201).json({ message: 'Phi·∫øu nh·∫≠p h√†ng ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng v√†o PhieuNhapKho!', receipt: newReceipt });
    } catch (err) {
        console.error('L·ªói khi l∆∞u phi·∫øu nh·∫≠p h√†ng v√†o PhieuNhapKho:', err);
        res.status(500).json({ error: 'Kh√¥ng th·ªÉ l∆∞u phi·∫øu nh·∫≠p h√†ng v√†o PhieuNhapKho.' });
    }
});

app.get('/api/nhaphang', requireLogin, async (req, res) => {
    try {
        const { daily, month } = req.query;
        let query = {};

        if (daily) {
            query.daily = new RegExp(daily, 'i');
        }

        if (month) {
            const [year, monthNum] = month.split('-');
            const startDate = new Date(year, parseInt(monthNum) - 1, 1);
            const endDate = new Date(year, parseInt(monthNum), 0);

            query.ngay = {
                $gte: startDate,
                $lte: endDate
            };
        }
        const receipts = await PhieuNhapKhoEntry.find(query).sort({ ngay: -1 });
        res.json(receipts);
    } catch (err) {
        console.error('L·ªói khi l·∫•y danh s√°ch nh·∫≠p h√†ng t·ª´ PhieuNhapKho:', err);
        res.status(500).json({ error: 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch nh·∫≠p h√†ng t·ª´ PhieuNhapKho.' });
    }
});

// API M·ªöI: L·∫•y m·ªôt phi·∫øu nh·∫≠p c·ª• th·ªÉ theo ID
app.get('/api/nhaphang/:id', requireLogin, async (req, res) => {
    try {
        const { id } = req.params;
        const receipt = await PhieuNhapKhoEntry.findById(id);
        if (!receipt) {
            return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y phi·∫øu nh·∫≠p.' });
        }
        res.json(receipt);
    } catch (err) {
        console.error('L·ªói khi l·∫•y chi ti·∫øt phi·∫øu nh·∫≠p:', err);
        res.status(500).json({ error: 'Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt phi·∫øu nh·∫≠p.' });
    }
});


// API ƒë·ªÉ x√≥a TO√ÄN B·ªò phi·∫øu nh·∫≠p (d·ª±a tr√™n _id c·ªßa phi·∫øu)
app.delete('/api/nhaphang', requireLogin, async (req, res) => {
    try {
        const { ids } = req.body; // Expect an array of receipt IDs to delete
        if (!Array.isArray(ids) || ids.length === 0) {
            return res.status(400).json({ error: 'Vui l√≤ng cung c·∫•p √≠t nh·∫•t m·ªôt ID phi·∫øu nh·∫≠p ƒë·ªÉ x√≥a.' });
        }
        const result = await PhieuNhapKhoEntry.deleteMany({ _id: { $in: ids } });
        res.status(200).json({ message: `ƒê√£ x√≥a ${result.deletedCount} phi·∫øu nh·∫≠p h√†ng t·ª´ PhieuNhapKho.`, deletedCount: result.deletedCount });
    } catch (err) {
        console.error('L·ªói khi x√≥a phi·∫øu nh·∫≠p h√†ng:', err);
        res.status(500).json({ error: 'Kh√¥ng th·ªÉ x√≥a phi·∫øu nh·∫≠p h√†ng.' });
    }
});

// API ƒë·ªÉ x√≥a m·ªôt m√≥n h√†ng c·ª• th·ªÉ kh·ªèi m·ªôt phi·∫øu nh·∫≠p
app.delete('/api/nhaphang/item', requireLogin, async (req, res) => {
    try {
        const { receiptId, itemId } = req.body;

        if (!receiptId || !itemId) {
            return res.status(400).json({ error: 'Vui l√≤ng cung c·∫•p ID phi·∫øu nh·∫≠p v√† ID m√≥n h√†ng ƒë·ªÉ x√≥a.' });
        }

        const receipt = await PhieuNhapKhoEntry.findById(receiptId);

        if (!receipt) {
            return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y phi·∫øu nh·∫≠p.' });
        }

        const initialItemCount = receipt.items.length;

        // S·ª≠ d·ª•ng $pull ƒë·ªÉ x√≥a subdocument theo _id c·ªßa n√≥
        receipt.items.pull(itemId);

        if (receipt.items.length === initialItemCount) {
             // If item count didn't change, it means the item was not found.
             return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y m√≥n h√†ng trong phi·∫øu nh·∫≠p n√†y.' });
        }

        // C·∫≠p nh·∫≠t l·∫°i t·ªïng ti·ªÅn c·ªßa phi·∫øu nh·∫≠p
        receipt.tongtien = receipt.items.reduce((sum, item) => item.thanhtien + sum, 0); // Corrected sum calculation

        await receipt.save();

        res.status(200).json({ message: 'ƒê√£ x√≥a m√≥n h√†ng th√†nh c√¥ng v√† c·∫≠p nh·∫≠t phi·∫øu nh·∫≠p.', receipt });
    } catch (err) {
        console.error('L·ªói khi x√≥a m√≥n h√†ng kh·ªèi phi·∫øu nh·∫≠p:', err);
        res.status(500).json({ error: 'Kh√¥ng th·ªÉ x√≥a m√≥n h√†ng kh·ªèi phi·∫øu nh·∫≠p.' });
    }
});


// ======= API S·∫¢N PH·∫®M (cho b√°n h√†ng) =======
app.get('/api/products/stock', requireLogin, async (req, res) => {
  try {
    const products = await Product.find({});
    res.json(products);
  } catch (err) {
    console.error(err);
    res.status(500).send('L·ªói server');
  }
});

// ======= KH·ªûI ƒê·ªòNG SERVER =======
app.listen(PORT, () => console.log(`üöÄ Server ch·∫°y t·∫°i http://localhost:${PORT}`));
