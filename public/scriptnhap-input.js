function removeDiacritics(str) {
            if (typeof str !== 'string') return '';
            return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();
        }

        function formatCurrency(value) {
            return new Intl.NumberFormat('vi-VN', {
                style: 'currency',
                currency: 'VND',
                minimumFractionDigits: 0
            }).format(value);
        }

        let allReceipts = [];

       async function loadReceipts() {
    try {
        const response = await fetch('/api/nhaphang');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        const data = await response.json();

        console.log("‚úÖ D·ªØ li·ªáu th√¥ t·ª´ server:", data);

        allReceipts = [];

        data.forEach(row => {
    const ngay = row.ngay;
    const daily = row.daily;

    if (Array.isArray(row.items)) {
        row.items.forEach(item => {
            allReceipts.push({
                ngay,
                daily,
                tenhang: item.tenhang,
                dvt: item.dvt,
                soluong: item.soluong,
                dongia: item.dongia,
                ck: item.ck,
                gianhap: item.gianhap || 0, // n·∫øu kh√¥ng c√≥ th√¨ m·∫∑c ƒë·ªãnh 0
                thanhtien: item.thanhtien || 0
            });
                });
            }
        });

        console.log("‚úÖ D·ªØ li·ªáu ƒë√£ t·∫£i:", allReceipts.length, "m·∫∑t h√†ng.");
               
                
        applyFilters();
    } catch (e) {
        console.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu:", e);
        Swal.fire({
            icon: 'error',
            title: 'L·ªói t·∫£i d·ªØ li·ªáu',
            text: 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu phi·∫øu nh·∫≠p h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.'
        });
    }
}

        function applyFilters() {
                    console.log("üß™ T·ªïng s·ªë d√≤ng d·ªØ li·ªáu tr∆∞·ªõc l·ªçc:", allReceipts.length);
console.log("üß™ allReceipts[0] =", allReceipts[0]);
            const searchTerm = removeDiacritics(document.getElementById('searchDailyNameInput')?.value.trim() || '');
            const searchMonth = document.getElementById('searchMonth')?.value || '';

            console.log(`üîç B·ªô l·ªçc: t·ª´ kh√≥a='${searchTerm}', th√°ng='${searchMonth}'`);

            const filteredReceipts = allReceipts.filter(item => {
                const itemDate = item.ngay ? new Date(item.ngay) : null;
                const monthMatch = !searchMonth || (itemDate && itemDate.toISOString().slice(0, 7) === searchMonth);

                const dailyStr = removeDiacritics(item.daily || '');
                const itemNameStr = removeDiacritics(item.tenhang || '');

                const searchMatch = !searchTerm || dailyStr.includes(searchTerm) || itemNameStr.includes(searchTerm);

                return monthMatch && searchMatch;
            });

            console.log("‚úÖ S·ªë k·∫øt qu·∫£ sau l·ªçc:", filteredReceipts.length);

if (filteredReceipts.length > 0) {
    console.log("üßæ M·ªôt d√≤ng ƒë·∫ßu ti√™n r√µ r√†ng:", JSON.stringify(filteredReceipts[0], null, 2));
} else {
    console.warn("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu sau l·ªçc.");
}
            renderReceiptsTable(filteredReceipts);
        }

       function renderFilteredResults(receipts) {
    const grouped = {};

    // Gom nh√≥m t·ª´ng m·∫∑t h√†ng theo daily + ngay
    receipts.forEach(r => {
        const dateStr = new Date(r.ngay).toISOString().split('T')[0];
        const key = `${r.daily}_${dateStr}`;
        if (!grouped[key]) {
            grouped[key] = {
                daily: r.daily,
                ngay: dateStr,
                items: [],
                tongtien: 0
            };
        }

        grouped[key].items.push(r);
        grouped[key].tongtien += r.thanhtien || 0;
    });

    const tbody = document.getElementById('receiptsTableBody');
    tbody.innerHTML = '';

    const keys = Object.keys(grouped);
    if (keys.length === 0) {
        tbody.innerHTML = `<tr><td colspan="6" class="text-center py-2 text-gray-500">Kh√¥ng c√≥ k·∫øt qu·∫£ ph√π h·ª£p.</td></tr>`;
        return;
    }

    keys.forEach((key, index) => {
        const receipt = grouped[key];
        const row = document.createElement('tr');

        const encodedDaily = encodeURIComponent(receipt.daily);
        const receiptKey = `${encodedDaily}_${receipt.ngay}`;

        row.innerHTML = `
            <td class="text-center">
                <input type="checkbox" class="receiptCheckbox" data-receipt-key="${receiptKey}">
            </td>
            <td>${index + 1}</td>
            <td>${receipt.daily}</td>
            <td>${new Date(receipt.ngay).toLocaleDateString('vi-VN')}</td>
            <td>${receipt.items.length}</td>
            <td class="text-right">${formatCurrency(receipt.tongtien)}</td>
        `;

        tbody.appendChild(row);
    });
}

        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('searchBtn')?.addEventListener('click', applyFilters);
            document.getElementById('searchDailyNameInput')?.addEventListener('input', applyFilters);
            document.getElementById('searchMonth')?.addEventListener('change', applyFilters);

            document.getElementById('viewDetailsBtn')?.addEventListener('click', () => {
                const selectedCheckboxes = Array.from(document.querySelectorAll('.receiptCheckbox:checked'));

                if (selectedCheckboxes.length !== 1) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Ch·ªçn 1 phi·∫øu duy nh·∫•t',
                        text: 'Vui l√≤ng ch·ªçn ƒë√∫ng 1 phi·∫øu ƒë·ªÉ xem chi ti·∫øt.'
                    });
                    return;
                }

                const checkbox = selectedCheckboxes[0];
                const receiptKey = checkbox.dataset.receiptKey;
                if (!receiptKey) {
                    console.error("receiptKey is undefined.");
                    return;
                }

                const [dailyNameEncoded, receiptDate] = receiptKey.split('_');
                const dailyName = decodeURIComponent(dailyNameEncoded);

                const detailURL = `/print-receipt.html?daily=${encodeURIComponent(dailyName)}&date=${receiptDate}`;
                window.open(detailURL, '_blank');
            });

            loadReceipts();
                   
        });
