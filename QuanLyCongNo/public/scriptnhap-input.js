function removeDiacritics(str) {
    if (typeof str !== 'string') return '';
    return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();
}

function formatCurrency(value) {
    return new Intl.NumberFormat('vi-VN', {
        style: 'currency',
        currency: 'VND',
        minimumFractionDigits: 0
    }).format(value);
}

let allReceipts = [];
const INITIAL_ROW_LIMIT = 10; // <<-- H·∫±ng s·ªë m·ªõi: gi·ªõi h·∫°n 10 h√†ng ban ƒë·∫ßu

async function loadReceipts() {
    try {
        const response = await fetch('/api/nhaphang');
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        const data = await response.json();

        console.log("‚úÖ D·ªØ li·ªáu th√¥ t·ª´ server:", data);

        allReceipts = [];

        data.forEach(row => {
            const ngay = row.ngay;
            const daily = row.daily;

            if (Array.isArray(row.items)) {
                row.items.forEach(item => {
                    allReceipts.push({
                        ngay,
                        daily,
                        tenhang: item.tenhang,
                        dvt: item.dvt,
                        soluong: item.soluong,
                        dongia: item.dongia,
                        ck: item.ck,
                        gianhap: item.gianhap || 0,
                        thanhtien: item.thanhtien || 0
                    });
                });
            }
        });

        console.log("‚úÖ D·ªØ li·ªáu ƒë√£ t·∫£i:", allReceipts.length, "m·∫∑t h√†ng.");
                
        // G·ªçi applyFilters v·ªõi c·ªù ƒë·ªÉ ch·ªâ hi·ªÉn th·ªã s·ªë l∆∞·ª£ng ban ƒë·∫ßu
        applyFilters(true); // <<-- Truy·ªÅn true ƒë·ªÉ ch·ªâ th·ªã ƒë√¢y l√† l·∫ßn t·∫£i ban ƒë·∫ßu
    } catch (e) {
        console.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu:", e);
        Swal.fire({
            icon: 'error',
            title: 'L·ªói t·∫£i d·ªØ li·ªáu',
            text: 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu phi·∫øu nh·∫≠p h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.'
        });
    }
}

// Th√™m tham s·ªë `isInitialLoad`
function applyFilters(isInitialLoad = false) { // <<-- M·∫∑c ƒë·ªãnh l√† false
    console.log("üß™ T·ªïng s·ªë d√≤ng d·ªØ li·ªáu tr∆∞·ªõc l·ªçc:", allReceipts.length);
    console.log("üß™ allReceipts[0] =", allReceipts[0]);
    const searchTerm = removeDiacritics(document.getElementById('searchDailyNameInput')?.value.trim() || '');
    const searchMonth = document.getElementById('searchMonth')?.value || '';

    console.log(`üîç B·ªô l·ªçc: t·ª´ kh√≥a='${searchTerm}', th√°ng='${searchMonth}'`);

    let filteredReceipts = allReceipts.filter(item => {
        const itemDate = item.ngay ? new Date(item.ngay) : null;
        const monthMatch = !searchMonth || (itemDate && itemDate.toISOString().slice(0, 7) === searchMonth);

        const dailyStr = removeDiacritics(item.daily || '');
        const itemNameStr = removeDiacritics(item.tenhang || '');

        const searchMatch = !searchTerm || dailyStr.includes(searchTerm) || itemNameStr.includes(searchTerm);

        return monthMatch && searchMatch;
    });

    console.log("‚úÖ S·ªë k·∫øt qu·∫£ sau l·ªçc:", filteredReceipts.length);

    if (filteredReceipts.length > 0) {
        console.log("üßæ M·ªôt d√≤ng ƒë·∫ßu ti√™n r√µ r√†ng:", JSON.stringify(filteredReceipts[0], null, 2));
    } else {
        console.warn("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu sau l·ªçc.");
    }

    // N·∫øu l√† t·∫£i ban ƒë·∫ßu v√† kh√¥ng c√≥ b·ªô l·ªçc t√¨m ki·∫øm n√†o, gi·ªõi h·∫°n s·ªë l∆∞·ª£ng hi·ªÉn th·ªã
    if (isInitialLoad && !searchTerm && !searchMonth) {
        renderReceiptsTable(filteredReceipts.slice(0, INITIAL_ROW_LIMIT)); // <<-- Gi·ªõi h·∫°n ·ªü ƒë√¢y
        // C√≥ th·ªÉ th√™m m·ªôt th√¥ng b√°o "Hi·ªÉn th·ªã 10 d√≤ng ƒë·∫ßu ti√™n. H√£y d√πng b·ªô l·ªçc ƒë·ªÉ xem th√™m."
    } else {
        renderReceiptsTable(filteredReceipts); // <<-- Hi·ªÉn th·ªã t·∫•t c·∫£ khi c√≥ b·ªô l·ªçc
    }
}

function renderReceiptsTable(receipts) {
    const tbody = document.querySelector('#receiptsTable tbody');
    if (!tbody) {
        console.error("Error: tbody element with ID 'receiptsTable' not found.");
        return;
    }
    tbody.innerHTML = '';

    receipts.forEach((item) => {
        const tr = document.createElement('tr');
        // ƒê·∫£m b·∫£o item.ngay l√† m·ªôt chu·ªói ng√†y h·ª£p l·ªá tr∆∞·ªõc khi t·∫°o Date object
        const formattedDateForUrl = item.ngay ? new Date(item.ngay).toISOString().split('T')[0] : '';
        const receiptKey = `${encodeURIComponent(item.daily || '')}_${formattedDateForUrl}`;

        tr.innerHTML = `
            <td><input type="checkbox" class="receiptCheckbox" data-receipt-key="${receiptKey}"></td>
            <td>${item.ngay ? new Date(item.ngay).toLocaleDateString('vi-VN') : ''}</td>
            <td>${item.daily || ''}</td>
            <td>${item.tenhang || ''}</td>
            <td>${item.dvt || ''}</td>
            <td>${item.soluong || 0}</td>
            <td>${formatCurrency(item.dongia || 0)}</td>
            <td>${(item.ck || 0)}%</td>
            <td>${formatCurrency(item.gianhap || 0)}</td>
            <td>${formatCurrency(item.thanhtien || 0)}</td>
        `;
        tbody.appendChild(tr);
    });
}

document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('searchBtn')?.addEventListener('click', () => applyFilters(false)); // Khi b·∫•m t√¨m, hi·ªÉn th·ªã t·∫•t c·∫£
    document.getElementById('searchDailyNameInput')?.addEventListener('input', () => applyFilters(false)); // Khi g√µ, hi·ªÉn th·ªã t·∫•t c·∫£
    document.getElementById('searchMonth')?.addEventListener('change', () => applyFilters(false)); // Khi ƒë·ªïi th√°ng, hi·ªÉn th·ªã t·∫•t c·∫£

    document.getElementById('viewDetailsBtn')?.addEventListener('click', () => {
        const selectedCheckboxes = Array.from(document.querySelectorAll('.receiptCheckbox:checked'));

        if (selectedCheckboxes.length !== 1) {
            Swal.fire({
                icon: 'warning',
                title: 'Ch·ªçn 1 phi·∫øu duy nh·∫•t',
                text: 'Vui l√≤ng ch·ªçn ƒë√∫ng 1 phi·∫øu ƒë·ªÉ xem chi ti·∫øt.'
            });
            return;
        }

        const checkbox = selectedCheckboxes[0];
        const receiptKey = checkbox.dataset.receiptKey;
        if (!receiptKey) {
            console.error("receiptKey is undefined.");
            return;
        }

        const [dailyNameEncoded, receiptDate] = receiptKey.split('_');
        const dailyName = decodeURIComponent(dailyNameEncoded);

        const detailURL = `/print-receipt.html?daily=${encodeURIComponent(dailyName)}&date=${receiptDate}`;
        window.open(detailURL, '_blank');
    });

    loadReceipts(); // H√†m n√†y s·∫Ω g·ªçi applyFilters(true) ban ƒë·∫ßu
});
